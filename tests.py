import inspect
from sciunit.capabilities import Runnable
from neurounit.capabilities import ProducesMembranePotential,ProducesSpikes
from neurounit.capabilities import ReceivesCurrent
import spike_functions
import neuroelectro
from numpy import *
from sciunit.tests import StandardTest
from sciunit.comparators import ZComparator # Comparators.  
from sciunit.comparators import ZScoreToBooleanScore # Converters.  
from sciunit.scores import BooleanScore # Scores.  

class SpikeWidthTest(StandardTest):
	"""Tests the full widths of spikes at their half-maximum."""
	def __init__(self,
			     reference_data={'mean':None,'std':None},
			     model_args={},
			     comparator=ZComparator):
		"""Takes the mean and standard deviation of reference spike widths"""
		print "Instantiating a spike width test."
		super(SpikeWidthTest,self).__init__(reference_data,model_args,comparator) 
		"""Register reference data and model arguments."""  
		
		self.required_capabilities += (ProducesMembranePotential,
							  		   ProducesSpikes,)
	comparator = ZComparator
	"""Compare the model to the reference and generate a Z-score."""

	converter = ZScoreToBooleanScore
	"""Convert from Z-score (generated by ZComparator) to Boolean score."""  

	conversion_params = {'thresh':2}
	"""-2 < Z-score < 2 required to get a BooleanScore of True, i.e. to pass the test."""

	def get_model_data(self,model):
		"""Extracts data from the model and returns it."""
		spikes = model.get_spikes() # Method implementation guaranteed by 
									# ProducesSpikes capability. 
		widths = spike_functions.spikes2widths(spikes)
		widths *= 1000 # Convert from s to ms.  
		model_data = {'mean':mean(widths),
					  	'std':std(widths)}
		return model_data

	def get_model_stats(self,model_data):
		"""Puts model stats in a form that the Comparator will understand."""
		return {'value':model_data['mean']}
		
	def get_reference_stats(self):
		"""Puts reference stats in a form that the Comparator will understand."""
		return {'mean':self.reference_data['mean'],
				'std':self.reference_data['std']}
		
	def generate_score(self,model_data):
		"""Return a score for the model on this test."""  
		score = super(SpikeWidthTest,self).generate_score(model_data)
		return score

class SpikeWidthTestDynamic(SpikeWidthTest):
	def __init__(self,
				 reference_data=SpikeWidthTest.__init__.im_func.func_defaults[0],  
			     model_args={'current':0.0},
			     comparator=SpikeWidthTest.__init__.im_func.func_defaults[2]):
		"""Takes a steady-state current to be injected into a cell."""

		super(SpikeWidthTestDynamic,self).__init__(reference_data,model_args,comparator) 
		self.required_capabilities += (ReceivesCurrent,)
		